{"version":3,"sources":["Steps/01_BasicInformation.jsx","Steps/03_ClusterInformation.jsx","Steps/02_PointOfContact.jsx","utilities/slugifyProperty.js","Steps/04_LaunchResidency.jsx","Components/Logo/Logo.jsx","formReducer.js","App.js","serviceWorker.js","index.js"],"names":["BasicInformation","values","onChange","Form","isHorizontal","FormGroup","label","fieldId","helperText","isRequired","TextInput","type","id","name","value","customer_name","e","payload","project_name","location","InputGroup","InputGroupText","component","htmlFor","aria-label","start_date","end_date","TextArea","description","ClusterInformation","options","FormSelect","isDisabled","providers","length","ocp_cloud_provider_name","map","option","index","FormSelectOption","disabled","key","ocp_cloud_provider_region","find","regions","ocp_version","openshift","versions","ocp_sub_domain","slugify","ocp_persistent_storage_size","ocp_cluster_size","PointOfContact","placeholder","engagement_lead_name","engagement_lead_email","technical_lead_name","technical_lead_emails","customer_contact_name","customer_contact_email","slugifyProperty","object","property","lower","Error","LaunchResidency","useState","isLoading","setIsLoading","hasError","setErrorResponse","success","setSuccessResponse","className","role","style","fontSize","Alert","isInline","title","variant","href","Button","onClick","preventDefault","axios","method","url","process","REACT_APP_BACKEND_URI","data","then","catch","error","finally","statusText","Logo","display","justifyContent","width","src","alt","formReducer","state","action","archive_date","technical_lead_email","App","useReducer","initialState","dispatch","clusterOptions","setClusterOptions","useEffect","get","response","yaml","parse","Page","header","PageHeader","sidebar","PageSidebar","isNavOpen","theme","nav","height","PageSection","Wizard","isCompactNav","isInPage","footer","steps","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84dd87a5.chunk.js","sourcesContent":["import React from \"react\";\nimport { CalendarAltIcon } from \"@patternfly/react-icons\";\nimport {\n  Form,\n  FormGroup,\n  InputGroup,\n  InputGroupText,\n  TextArea,\n  TextInput\n} from \"@patternfly/react-core\";\nconst BasicInformation = ({ values, onChange }) => {\n  return (\n    <Form isHorizontal>\n      <FormGroup\n        label=\"Customer Name\"\n        fieldId=\"customer-name\"\n        helperText=\"The client this residency is for\"\n        isRequired\n      >\n        <TextInput\n          type=\"text\"\n          id=\"customer_name\"\n          name=\"customer_name\"\n          value={values.customer_name}\n          onChange={e => onChange({ type: \"customer_name\", payload: e })}\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Project Name\"\n        fieldId=\"project-name\"\n        helperText=\"The solution being worked on during the residency\"\n        isRequired\n      >\n        <TextInput\n          type=\"text\"\n          id=\"project_name\"\n          name=\"project_name\"\n          value={values.project_name}\n          onChange={e => onChange({ type: \"project_name\", payload: e })}\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Location\"\n        fieldId=\"residency-location\"\n        helperText=\"Where this residency will be held\"\n        isRequired\n      >\n        <TextInput\n          type=\"text\"\n          id=\"location\"\n          name=\"location\"\n          value={values.location}\n          onChange={e => onChange({ type: \"location\", payload: e })}\n        />\n      </FormGroup>\n      <FormGroup\n        label=\"Residency Dates\"\n        fieldId=\"residency-dates\"\n        helperText=\"The the start and end dates of this residency\"\n        isRequired\n      >\n        <InputGroup label=\"Residency Duration\">\n          <InputGroupText component=\"label\" htmlFor=\"residency-duration\">\n            <CalendarAltIcon />\n          </InputGroupText>\n          <TextInput\n            name=\"start_date\"\n            id=\"start_date\"\n            type=\"date\"\n            aria-label=\"Residency start date\"\n            value={values.start_date}\n            onChange={e => onChange({ type: \"start_date\", payload: e })}\n          />\n          <TextInput\n            name=\"end_date\"\n            id=\"end_date\"\n            type=\"date\"\n            aria-label=\"Residency end date\"\n            value={values.end_date}\n            onChange={e => onChange({ type: \"end_date\", payload: e })}\n          />\n        </InputGroup>\n      </FormGroup>\n      <FormGroup label=\"Description\" fieldId=\"description\">\n        <TextArea\n          name=\"description\"\n          id=\"description\"\n          aria-label=\"residency description\"\n          value={values.description}\n          onChange={e => onChange({ type: \"description\", payload: e })}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default BasicInformation;\n","import React from \"react\";\nimport {\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput\n} from \"@patternfly/react-core\";\nimport slugify from \"slugify\";\nimport find from \"lodash.find\";\n\nconst ClusterInformation = ({ options, values, onChange }) => {\n  return (\n    <Form isHorizontal>\n      <FormGroup fieldId=\"cloud-provider\" label=\"Cloud Provider\" isRequired>\n        <FormSelect\n          aria-label=\"Cloud Provider\"\n          isDisabled={options.providers.length === 1}\n          value={values.ocp_cloud_provider_name}\n          onChange={e =>\n            onChange({ type: \"ocp_cloud_provider_name\", payload: e })\n          }\n        >\n          {options.providers.map((option, index) => (\n            <FormSelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              label={option.label}\n            />\n          ))}\n        </FormSelect>\n      </FormGroup>\n\n      <FormGroup\n        label=\"Provider Region\"\n        isRequired\n        fieldId=\"cloud-provider-region\"\n      >\n        {values.ocp_cloud_provider_name ? (\n          <FormSelect\n            aria-label=\"Cloud provider region\"\n            value={values.ocp_cloud_provider_region}\n            onChange={e =>\n              onChange({ type: \"ocp_cloud_provider_region\", payload: e })\n            }\n          >\n            {find(options.providers, {\n              value: values.ocp_cloud_provider_name\n            }).regions.map((option, index) => (\n              <FormSelectOption\n                isDisabled={option.disabled}\n                key={index}\n                value={option.value}\n                label={option.label}\n              />\n            ))}\n          </FormSelect>\n        ) : null}\n      </FormGroup>\n\n      <FormGroup\n        label=\"OpenShift Version\"\n        isRequired\n        fieldId=\"openshift-provider\"\n      >\n        <FormSelect\n          aria-label=\"OpenShift Version\"\n          value={values.ocp_version}\n          isDisabled={options.openshift.versions.length === 1}\n          onChange={e => onChange({ type: \"ocp_version\", payload: e })}\n        >\n          {options.openshift.versions.map((option, index) => (\n            <FormSelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n              label={option.label}\n            />\n          ))}\n        </FormSelect>\n      </FormGroup>\n\n      <FormGroup\n        label=\"Desired Subdomain\"\n        isRequired\n        fieldId=\"subdomain\"\n        helperText={\n          <div>\n            Applications will live at:\n            <strong>\n              {`${\n                values.ocp_sub_domain\n                  ? slugify(values.ocp_sub_domain)\n                  : \"<desired-subdomain>\"\n              }.rht-labs.com`}\n            </strong>\n          </div>\n        }\n      >\n        <TextInput\n          isRequired\n          type=\"text\"\n          id=\"ocp_sub_domain\"\n          name=\"ocp_sub_domain\"\n          value={values.ocp_sub_domain}\n          onChange={e => onChange({ type: \"ocp_sub_domain\", payload: e })}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label=\"Persistent Storage Needs\"\n        isRequired\n        fieldId=\"persistent-storage-needs\"\n      >\n        <FormSelect\n          aria-label=\"Persistent Storage Needs\"\n          isDisabled={options.openshift[\"persistent-storage\"].length === 1}\n          onChange={e =>\n            onChange({ type: \"ocp_persistent_storage_size\", payload: e })\n          }\n          value={values.ocp_persistent_storage_size}\n        >\n          {options.openshift[\"persistent-storage\"].map((option, index) => (\n            <FormSelectOption\n              isDisabled={option.disabled}\n              key={index}\n              label={option.label}\n              value={option.value}\n            />\n          ))}\n        </FormSelect>\n      </FormGroup>\n      <FormGroup label=\"Cluster Size\" isRequired fieldId=\"cluster-size\">\n        <FormSelect\n          aria-label=\"Cluster Size\"\n          value={values.ocp_cluster_size}\n          isDisabled={options.openshift[\"cluster-size\"].length === 1}\n          onChange={e => onChange({ type: \"ocp_cluster_size\", payload: e })}\n        >\n          {options.openshift[\"cluster-size\"].map((option, index) => (\n            <FormSelectOption\n              isDisabled={option.disabled}\n              key={index}\n              label={option.label}\n              value={option.value}\n            />\n          ))}\n        </FormSelect>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default ClusterInformation;\n","import React from \"react\";\nimport {\n  Form,\n  FormGroup,\n  InputGroup,\n  InputGroupText,\n  TextInput\n} from \"@patternfly/react-core\";\nimport { UserIcon, EnvelopeIcon } from \"@patternfly/react-icons\";\n\nconst PointOfContact = ({ values, onChange }) => {\n  return (\n    <Form isHorizontal>\n      <FormGroup\n        fieldId=\"engagement_lead\"\n        helperText=\"Who is the Engagement Lead on this residency?\"\n        isRequired\n        label=\"Labs EL\"\n      >\n        <InputGroup>\n          <InputGroupText component=\"label\" htmlFor=\"engagement-lead\">\n            <UserIcon />\n          </InputGroupText>\n          <TextInput\n            aria-label=\"Engagement lead name\"\n            id=\"name\"\n            name=\"engagement-lead-name\"\n            onChange={e =>\n              onChange({ type: \"engagement_lead_name\", payload: e })\n            }\n            placeholder=\"Name\"\n            type=\"text\"\n            value={values.engagement_lead_name}\n          />\n          <InputGroupText component=\"label\" htmlFor=\"engagement-lead-email\">\n            <EnvelopeIcon />\n          </InputGroupText>\n          <TextInput\n            aria-label=\"engagement lead email\"\n            id=\"email\"\n            name=\"engagement-lead-email\"\n            onChange={e =>\n              onChange({ type: \"engagement_lead_email\", payload: e })\n            }\n            placeholder=\"Email Address\"\n            type=\"email\"\n            value={values.engagement_lead_email}\n          />\n        </InputGroup>\n      </FormGroup>\n\n      <FormGroup\n        fieldId=\"technical_lead\"\n        isRequired\n        helperText=\"Who is the Tech Lead on this residency?\"\n        label=\"Labs Technical Lead\"\n      >\n        <InputGroup label=\"Labs Tech Lead\">\n          <InputGroupText component=\"label\" htmlFor=\"tech-lead-name\">\n            <UserIcon />\n          </InputGroupText>\n          <TextInput\n            aria-label=\"Tech lead name\"\n            id=\"tech-lead-name\"\n            name=\"tech-lead-name\"\n            onChange={e =>\n              onChange({ type: \"technical_lead_name\", payload: e })\n            }\n            placeholder=\"Name\"\n            type=\"text\"\n            value={values.technical_lead_name}\n          />\n          <InputGroupText component=\"label\" htmlFor=\"tech-lead-email\">\n            <EnvelopeIcon />\n          </InputGroupText>\n          <TextInput\n            aria-label=\"tech lead email\"\n            id=\"tech-lead-email\"\n            name=\"tech-lead-email\"\n            onChange={e =>\n              onChange({ type: \"technical_lead_email\", payload: e })\n            }\n            placeholder=\"Email Address\"\n            type=\"email\"\n            value={values.technical_lead_emails}\n          />\n        </InputGroup>\n      </FormGroup>\n\n      <FormGroup\n        fieldId=\"customer-contact\"\n        helperText=\"Who is the main point of contact for the customer?\"\n        isRequired\n        label=\"Customer Contact\"\n      >\n        <InputGroup label=\"Customer Contact\">\n          <InputGroupText component=\"label\" htmlFor=\"customer-contact-name\">\n            <UserIcon />\n          </InputGroupText>\n          <TextInput\n            aria-label=\"Customer contact name\"\n            id=\"customer-contact-name\"\n            name=\"customer-contact-name\"\n            onChange={e =>\n              onChange({ type: \"customer_contact_name\", payload: e })\n            }\n            type=\"text\"\n            placeholder=\"Name\"\n            value={values.customer_contact_name}\n          />\n          <InputGroupText component=\"label\" htmlFor=\"customer-contact-email\">\n            <EnvelopeIcon />\n          </InputGroupText>\n          <TextInput\n            aria-label=\"customer contact email\"\n            id=\"customer-contact-email\"\n            name=\"customer-contact-email\"\n            onChange={e =>\n              onChange({ type: \"customer_contact_email\", payload: e })\n            }\n            placeholder=\"Email Address\"\n            type=\"email\"\n            value={values.customer_contact_email}\n          />\n        </InputGroup>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default PointOfContact;\n","import slugify from \"slugify\";\n\nconst slugifyProperty = (object, property) => {\n  if (object && object[property]) {\n    object[property] = slugify(object[property], { lower: true });\n    return object;\n  }\n  if (object && !object[property]) {\n    return object;\n  }\n  throw new Error(\"Object and Property Required\");\n};\n\nexport default slugifyProperty;\n","import React, { useState } from \"react\";\nimport { Alert, Button } from \"@patternfly/react-core\";\nimport axios from \"axios\";\nimport slugifyProperty from \"../utilities/slugifyProperty\";\n\nconst LaunchResidency = ({ values }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setErrorResponse] = useState(null);\n  const [success, setSuccessResponse] = useState(null);\n  return (\n    <div className=\"pf-l-bullseye\">\n      <div className=\"pf-c-empty-state pf-m-lg\">\n        {success ? (\n          <span\n            aria-label=\"thumbs up emoji\"\n            role=\"img\"\n            style={{ fontSize: \"5rem\" }}\n          >\n            👍🏽\n          </span>\n        ) : (\n          <span\n            aria-label=\"rocket emoji\"\n            role=\"img\"\n            style={{ fontSize: \"5rem\" }}\n          >\n            🚀\n          </span>\n        )}\n\n        <div className=\"pf-c-empty-state__body\">\n          <h3>\n            {!isLoading ? (\n              <span>\n                We are about to launch your residency cluster with this\n                information.\n              </span>\n            ) : (\n              <span>\n                This might take a minute. You may want to get a\n                <span role=\"img\" aria-label=\"coffee emoji\">\n                  ☕\n                </span>\n              </span>\n            )}\n          </h3>\n        </div>\n\n        {!success ? (\n          <Button\n            onClick={e => {\n              e.preventDefault();\n              setIsLoading(true);\n              axios({\n                method: \"post\",\n                url: `${process.env.REACT_APP_BACKEND_URI}/residencies`,\n                data: slugifyProperty(values, \"ocp_sub_domain\")\n              })\n                .then(() => {\n                  setSuccessResponse(true);\n                })\n                .catch(error => {\n                  setErrorResponse(error);\n                })\n                .finally(() => {\n                  setIsLoading(false);\n                });\n            }}\n            isDisabled={isLoading}\n          >\n            {!isLoading ? \"Let's Do It!\" : \"Launching...\"}\n          </Button>\n        ) : (\n          <div className=\"pf-c-empty-state\">\n            <Alert isInline title=\"You did it!\" variant=\"success\">\n              <div>\n                Your cluster should be ready soon at:\n                <a\n                  href={`${values.ocp_sub_domain}.rht-labs.com`}\n                >{`${values.ocp_sub_domain}.rht-labs.com`}</a>\n              </div>\n            </Alert>\n          </div>\n        )}\n\n        {hasError ? (\n          <div className=\"pf-c-empty-state\">\n            <Alert isInline title=\"We encountered an error.\" variant=\"danger\">\n              {hasError.statusText}\n            </Alert>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\nexport default LaunchResidency;\n","import React from \"react\";\n\nconst Logo = () => (\n  <div style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\" }}>\n    <img\n      style={{ width: \"50%\" }}\n      src=\"https://www.redhat.com/cms/managed-files/RHOIL_LogoBadge_RGB_Default.svg\"\n      alt=\"Open Innovation Labs Logo\"\n    />\n  </div>\n);\n\nexport default Logo;\n","const formReducer = (state, action) => {\n  switch (action.type) {\n    case \"customer_name\":\n      return { ...state, customer_name: action.payload };\n    case \"project_name\":\n      return { ...state, project_name: action.payload };\n    case \"description\":\n      return { ...state, description: action.payload };\n    case \"location\":\n      return { ...state, location: action.payload };\n    case \"start_date\":\n      return { ...state, start_date: action.payload };\n    case \"end_date\":\n      return { ...state, end_date: action.payload };\n    case \"archive_date\":\n      return { ...state, archive_date: action.payload };\n    case \"engagement_lead_name\":\n      return { ...state, engagement_lead_name: action.payload };\n    case \"engagement_lead_email\":\n      return { ...state, engagement_lead_email: action.payload };\n    case \"technical_lead_name\":\n      return { ...state, technical_lead_name: action.payload };\n    case \"technical_lead_email\":\n      return { ...state, technical_lead_email: action.payload };\n    case \"customer_contact_name\":\n      return { ...state, customer_contact_name: action.payload };\n    case \"customer_contact_email\":\n      return { ...state, customer_contact_email: action.payload };\n    case \"ocp_cloud_provider_name\":\n      return { ...state, ocp_cloud_provider_name: action.payload };\n    case \"ocp_cloud_provider_region\":\n      return { ...state, ocp_cloud_provider_region: action.payload };\n    case \"ocp_version\":\n      return { ...state, ocp_version: action.payload };\n    case \"ocp_sub_domain\":\n      return { ...state, ocp_sub_domain: action.payload };\n    case \"ocp_persistent_storage_size\":\n      return { ...state, ocp_persistent_storage_size: action.payload };\n    case \"ocp_cluster_size\":\n      return { ...state, ocp_cluster_size: action.payload };\n    default:\n      throw new Error();\n  }\n};\n\nexport default formReducer;\n","import React, { useReducer, useEffect, useState } from \"react\";\nimport \"@patternfly/react-core/dist/styles/base.css\";\nimport {\n  Page,\n  PageHeader,\n  PageSidebar,\n  PageSection,\n  Wizard\n} from \"@patternfly/react-core\";\nimport BasicInformation from \"./Steps/01_BasicInformation\";\nimport ClusterInformation from \"./Steps/03_ClusterInformation\";\nimport PointOfContact from \"./Steps/02_PointOfContact\";\nimport LaunchResidency from \"./Steps/04_LaunchResidency\";\nimport Logo from \"./Components/Logo/Logo\";\nimport formReducer from \"./formReducer\";\nimport initialState from \"./initialState\";\nimport yaml from \"yaml\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [state, dispatch] = useReducer(formReducer, initialState);\n  const [clusterOptions, setClusterOptions] = useState(null);\n  useEffect(() => {\n    axios\n      .get(\n        \"https://gist.githubusercontent.com/jacobsee/894ef91d9f8722c87a403bcca67ba305/raw/35ce8e2b6b76b1e69a5245acf1943389a2ad6c2c/lucas-test.yml\"\n      )\n      .then(response => {\n        const data = yaml.parse(response.data);\n        setClusterOptions(data);\n        dispatch({\n          type: \"ocp_cloud_provider_region\",\n          payload: data.providers[0].regions[0].value\n        });\n        dispatch({\n          type: \"ocp_cloud_provider_name\",\n          payload: data.providers[0].value\n        });\n        dispatch({\n          type: \"ocp_cluster_size\",\n          payload: data.openshift[\"cluster-size\"][0].value\n        });\n        dispatch({\n          type: \"ocp_version\",\n          payload: data.openshift.versions[0].value\n        });\n      });\n  }, []);\n  return (\n    <Page\n      header={<PageHeader />}\n      sidebar={<PageSidebar isNavOpen theme=\"dark\" nav={<Logo />} />}\n      style={{ height: \"100vh\" }}\n    >\n      <PageSection>\n        <div className=\"pf-c-content\">\n          <h2>Residency Data Gathering</h2>\n        </div>\n      </PageSection>\n      <PageSection>\n        <Wizard\n          isCompactNav\n          isInPage\n          footer={<span />} //don't render dumb footer\n          steps={[\n            {\n              name: \"Basic Information\",\n              component: <BasicInformation values={state} onChange={dispatch} />\n            },\n            {\n              name: \"Point of Contact\",\n              component: <PointOfContact values={state} onChange={dispatch} />\n            },\n            {\n              name: \"Openshift Cluster\",\n              component: (\n                <ClusterInformation\n                  options={clusterOptions}\n                  values={state}\n                  onChange={dispatch}\n                />\n              )\n            },\n            {\n              name: \"Launch Residency\",\n              component: <LaunchResidency values={state} onChange={dispatch} />\n            }\n          ]}\n        />\n      </PageSection>\n    </Page>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}